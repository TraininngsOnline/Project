import { Injectable } from '@angular/core';
import { StripeService } from './stripe.service';
export class StripeElementsService {
    constructor(stripeService) {
        this.stripeService = stripeService;
    }
    elements(stripe, options = {}) {
        if (stripe) {
            if (Object.keys(options).length > 0) {
                return stripe.elements(options);
            }
            return stripe.elements();
        }
        else {
            if (Object.keys(options).length > 0) {
                return this.stripeService.elements(options);
            }
            return this.stripeService.elements();
        }
    }
    paymentRequest(stripe, options) {
        return stripe
            ? stripe.paymentRequest(options)
            : this.stripeService.paymentRequest(options);
    }
    mergeOptions(options, containerClass) {
        if (!containerClass || (options && options.classes)) {
            return options || {};
        }
        if (!options || !options.classes) {
            return Object.assign(Object.assign({}, (options || {})), { classes: {
                    base: containerClass,
                    complete: `${containerClass}--complete`,
                    empty: `${containerClass}--empty`,
                    focus: `${containerClass}--focus`,
                    invalid: `${containerClass}--invalid`,
                    webkitAutoFill: `${containerClass}--webkit-autoFill`
                } });
        }
        return options || {};
    }
}
StripeElementsService.decorators = [
    { type: Injectable }
];
StripeElementsService.ctorParameters = () => [
    { type: StripeService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaXBlLWVsZW1lbnRzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc3RyaXBlL3NyYy9saWIvc2VydmljZXMvc3RyaXBlLWVsZW1lbnRzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQW1CM0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBR2pELE1BQU0sT0FBTyxxQkFBcUI7SUFDaEMsWUFBb0IsYUFBNEI7UUFBNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7SUFBRyxDQUFDO0lBRXBELFFBQVEsQ0FDTixNQUFNLEVBQ04sVUFBaUMsRUFBRTtRQUVuQyxJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNuQyxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDakM7WUFDRCxPQUFPLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUMxQjthQUFNO1lBQ0wsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQ25DLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDN0M7WUFDRCxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDdEM7SUFDSCxDQUFDO0lBRUQsY0FBYyxDQUNaLE1BQU0sRUFDTixPQUE4QjtRQUU5QixPQUFPLE1BQU07WUFDWCxDQUFDLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUM7WUFDaEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFzQ0QsWUFBWSxDQUFDLE9BQU8sRUFBRSxjQUFzQjtRQUMxQyxJQUFJLENBQUMsY0FBYyxJQUFJLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNuRCxPQUFPLE9BQU8sSUFBSSxFQUFFLENBQUM7U0FDdEI7UUFFRCxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRTtZQUNoQyx1Q0FDSyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsS0FDbEIsT0FBTyxFQUFFO29CQUNQLElBQUksRUFBRSxjQUFjO29CQUNwQixRQUFRLEVBQUUsR0FBRyxjQUFjLFlBQVk7b0JBQ3ZDLEtBQUssRUFBRSxHQUFHLGNBQWMsU0FBUztvQkFDakMsS0FBSyxFQUFFLEdBQUcsY0FBYyxTQUFTO29CQUNqQyxPQUFPLEVBQUUsR0FBRyxjQUFjLFdBQVc7b0JBQ3JDLGNBQWMsRUFBRSxHQUFHLGNBQWMsbUJBQW1CO2lCQUNyRCxJQUNEO1NBQ0g7UUFFRCxPQUFPLE9BQU8sSUFBSSxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7O1lBdEZGLFVBQVU7OztZQUZGLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7XG4gIFBheW1lbnRSZXF1ZXN0LFxuICBQYXltZW50UmVxdWVzdE9wdGlvbnMsXG4gIFN0cmlwZUNhcmRFbGVtZW50T3B0aW9ucyxcbiAgU3RyaXBlQXVCYW5rQWNjb3VudEVsZW1lbnRPcHRpb25zLFxuICBTdHJpcGVDYXJkTnVtYmVyRWxlbWVudE9wdGlvbnMsXG4gIFN0cmlwZUNhcmRFeHBpcnlFbGVtZW50T3B0aW9ucyxcbiAgU3RyaXBlRWxlbWVudHMsXG4gIFN0cmlwZUVsZW1lbnRzT3B0aW9ucyxcbiAgU3RyaXBlRnB4QmFua0VsZW1lbnRPcHRpb25zLFxuICBTdHJpcGVJYmFuRWxlbWVudE9wdGlvbnMsXG4gIFN0cmlwZUlkZWFsQmFua0VsZW1lbnRPcHRpb25zLFxuICBTdHJpcGVQYXltZW50UmVxdWVzdEJ1dHRvbkVsZW1lbnRPcHRpb25zLFxuICBTdHJpcGVQYXltZW50RWxlbWVudE9wdGlvbnNcbn0gZnJvbSAnQHN0cmlwZS9zdHJpcGUtanMnO1xuXG5pbXBvcnQgeyBTdHJpcGVTZXJ2aWNlIH0gZnJvbSAnLi9zdHJpcGUuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTdHJpcGVFbGVtZW50c1NlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0cmlwZVNlcnZpY2U6IFN0cmlwZVNlcnZpY2UpIHt9XG5cbiAgZWxlbWVudHMoXG4gICAgc3RyaXBlLFxuICAgIG9wdGlvbnM6IFN0cmlwZUVsZW1lbnRzT3B0aW9ucyA9IHt9XG4gICk6IE9ic2VydmFibGU8U3RyaXBlRWxlbWVudHM+IHtcbiAgICBpZiAoc3RyaXBlKSB7XG4gICAgICBpZiAoT2JqZWN0LmtleXMob3B0aW9ucykubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gc3RyaXBlLmVsZW1lbnRzKG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmlwZS5lbGVtZW50cygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoT2JqZWN0LmtleXMob3B0aW9ucykubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHJpcGVTZXJ2aWNlLmVsZW1lbnRzKG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuc3RyaXBlU2VydmljZS5lbGVtZW50cygpO1xuICAgIH1cbiAgfVxuXG4gIHBheW1lbnRSZXF1ZXN0KFxuICAgIHN0cmlwZSxcbiAgICBvcHRpb25zOiBQYXltZW50UmVxdWVzdE9wdGlvbnNcbiAgKTogUGF5bWVudFJlcXVlc3QgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiBzdHJpcGVcbiAgICAgID8gc3RyaXBlLnBheW1lbnRSZXF1ZXN0KG9wdGlvbnMpXG4gICAgICA6IHRoaXMuc3RyaXBlU2VydmljZS5wYXltZW50UmVxdWVzdChvcHRpb25zKTtcbiAgfVxuXG4gIG1lcmdlT3B0aW9ucyhcbiAgICBvcHRpb25zOiBTdHJpcGVDYXJkRWxlbWVudE9wdGlvbnMsXG4gICAgY29udGFpbmVyQ2xhc3M6IHN0cmluZ1xuICApOiBTdHJpcGVDYXJkRWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhcbiAgICBvcHRpb25zOiBTdHJpcGVDYXJkTnVtYmVyRWxlbWVudE9wdGlvbnMsXG4gICAgY29udGFpbmVyQ2xhc3M6IHN0cmluZ1xuICApOiBTdHJpcGVDYXJkTnVtYmVyRWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhcbiAgICBvcHRpb25zOiBTdHJpcGVDYXJkRXhwaXJ5RWxlbWVudE9wdGlvbnMsXG4gICAgY29udGFpbmVyQ2xhc3M6IHN0cmluZ1xuICApOiBTdHJpcGVDYXJkRXhwaXJ5RWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhcbiAgICBvcHRpb25zOiBTdHJpcGVGcHhCYW5rRWxlbWVudE9wdGlvbnMsXG4gICAgY29udGFpbmVyQ2xhc3M6IHN0cmluZ1xuICApOiBTdHJpcGVGcHhCYW5rRWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhcbiAgICBvcHRpb25zOiBTdHJpcGVJYmFuRWxlbWVudE9wdGlvbnMsXG4gICAgY29udGFpbmVyQ2xhc3M6IHN0cmluZ1xuICApOiBTdHJpcGVJYmFuRWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhcbiAgICBvcHRpb25zOiBTdHJpcGVJZGVhbEJhbmtFbGVtZW50T3B0aW9ucyxcbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nXG4gICk6IFN0cmlwZUlkZWFsQmFua0VsZW1lbnRPcHRpb25zO1xuICBtZXJnZU9wdGlvbnMoXG4gICAgb3B0aW9uczogU3RyaXBlQXVCYW5rQWNjb3VudEVsZW1lbnRPcHRpb25zLFxuICAgIGNvbnRhaW5lckNsYXNzOiBzdHJpbmdcbiAgKTogU3RyaXBlQXVCYW5rQWNjb3VudEVsZW1lbnRPcHRpb25zO1xuICBtZXJnZU9wdGlvbnMoXG4gICAgb3B0aW9uczogU3RyaXBlUGF5bWVudFJlcXVlc3RCdXR0b25FbGVtZW50T3B0aW9ucyxcbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nXG4gICk6IFN0cmlwZVBheW1lbnRSZXF1ZXN0QnV0dG9uRWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhcbiAgICBvcHRpb25zOiBTdHJpcGVQYXltZW50RWxlbWVudE9wdGlvbnMsXG4gICAgY29udGFpbmVyQ2xhc3M6IHN0cmluZ1xuICApOiBTdHJpcGVQYXltZW50RWxlbWVudE9wdGlvbnM7XG4gIG1lcmdlT3B0aW9ucyhvcHRpb25zLCBjb250YWluZXJDbGFzczogc3RyaW5nKSB7XG4gICAgaWYgKCFjb250YWluZXJDbGFzcyB8fCAob3B0aW9ucyAmJiBvcHRpb25zLmNsYXNzZXMpKSB7XG4gICAgICByZXR1cm4gb3B0aW9ucyB8fCB7fTtcbiAgICB9XG5cbiAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMuY2xhc3Nlcykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uKG9wdGlvbnMgfHwge30pLFxuICAgICAgICBjbGFzc2VzOiB7XG4gICAgICAgICAgYmFzZTogY29udGFpbmVyQ2xhc3MsXG4gICAgICAgICAgY29tcGxldGU6IGAke2NvbnRhaW5lckNsYXNzfS0tY29tcGxldGVgLFxuICAgICAgICAgIGVtcHR5OiBgJHtjb250YWluZXJDbGFzc30tLWVtcHR5YCxcbiAgICAgICAgICBmb2N1czogYCR7Y29udGFpbmVyQ2xhc3N9LS1mb2N1c2AsXG4gICAgICAgICAgaW52YWxpZDogYCR7Y29udGFpbmVyQ2xhc3N9LS1pbnZhbGlkYCxcbiAgICAgICAgICB3ZWJraXRBdXRvRmlsbDogYCR7Y29udGFpbmVyQ2xhc3N9LS13ZWJraXQtYXV0b0ZpbGxgXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG9wdGlvbnMgfHwge307XG4gIH1cbn1cbiJdfQ==