{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/admin/Music/Angular/Project/traininngs-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n * SPDX-License-Identifier: BSD-3-Clause\r\n */\nvar _a, _b, _c;\n\nvar _d;\n/**\r\n * Use this module if you want to create your own base class extending\r\n * [[ReactiveElement]].\r\n * @packageDocumentation\r\n */\n\n\nimport { getCompatibleStyle, adoptStyles } from './css-tag.js';\nexport * from './css-tag.js';\nconst DEV_MODE = true;\nlet requestUpdateThenable;\nlet issueWarning;\nconst trustedTypes = window.trustedTypes; // Temporary workaround for https://crbug.com/993268\n// Currently, any attribute starting with \"on\" is considered to be a\n// TrustedScript source. Such boolean attributes must be set to the equivalent\n// trusted emptyScript value.\n\nconst emptyStringForBooleanAttribute = trustedTypes ? trustedTypes.emptyScript : '';\nconst polyfillSupport = DEV_MODE ? window.reactiveElementPolyfillSupportDevMode : window.reactiveElementPolyfillSupport;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings = (_a = globalThis.litIssuedWarnings) !== null && _a !== void 0 ? _a : globalThis.litIssuedWarnings = new Set(); // Issue a warning, if we haven't already.\n\n  issueWarning = (code, warning) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n\n  issueWarning('dev-mode', `Lit is in dev mode. Not recommended for production!`); // Issue polyfill support warning.\n\n  if (((_b = window.ShadyDOM) === null || _b === void 0 ? void 0 : _b.inUse) && polyfillSupport === undefined) {\n    issueWarning('polyfill-support-missing', `Shadow DOM is being polyfilled via \\`ShadyDOM\\` but ` + `the \\`polyfill-support\\` module has not been loaded.`);\n  }\n\n  requestUpdateThenable = name => ({\n    then: (onfulfilled, _onrejected) => {\n      issueWarning('request-update-promise', `The \\`requestUpdate\\` method should no longer return a Promise but ` + `does so on \\`${name}\\`. Use \\`updateComplete\\` instead.`);\n\n      if (onfulfilled !== undefined) {\n        onfulfilled(false);\n      }\n    }\n  });\n}\n/*\r\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\r\n * replaced at compile time by the munged name for object[property]. We cannot\r\n * alias this function, so we have to use a small shim that has the same\r\n * behavior when not compiling.\r\n */\n\n/*@__INLINE__*/\n\n\nconst JSCompiler_renameProperty = (prop, _obj) => prop;\n\nexport const defaultConverter = {\n  toAttribute(value, type) {\n    switch (type) {\n      case Boolean:\n        value = value ? emptyStringForBooleanAttribute : null;\n        break;\n\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        value = value == null ? value : JSON.stringify(value);\n        break;\n    }\n\n    return value;\n  },\n\n  fromAttribute(value, type) {\n    let fromValue = value;\n\n    switch (type) {\n      case Boolean:\n        fromValue = value !== null;\n        break;\n\n      case Number:\n        fromValue = value === null ? null : Number(value);\n        break;\n\n      case Object:\n      case Array:\n        // Do *not* generate exception when invalid JSON is set as elements\n        // don't normally complain on being mis-configured.\n        // TODO(sorvell): Do generate exception in *dev mode*.\n        try {\n          // Assert to adhere to Bazel's \"must type assert JSON parse\" rule.\n          fromValue = JSON.parse(value);\n        } catch (e) {\n          fromValue = null;\n        }\n\n        break;\n    }\n\n    return fromValue;\n  }\n\n};\n/**\r\n * Change function that returns true if `value` is different from `oldValue`.\r\n * This method is used as the default for a property's `hasChanged` function.\r\n */\n\nexport const notEqual = (value, old) => {\n  // This ensures (old==NaN, value==NaN) always returns false\n  return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual\n};\n/**\r\n * The Closure JS Compiler doesn't currently have good support for static\r\n * property semantics where \"this\" is dynamic (e.g.\r\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\r\n * this hack to bypass any rewriting by the compiler.\r\n */\n\nconst finalized = 'finalized';\n/**\r\n * Base element class which manages element properties and attributes. When\r\n * properties change, the `update` method is asynchronously called. This method\r\n * should be supplied by subclassers to render updates as desired.\r\n * @noInheritDoc\r\n */\n\nexport class ReactiveElement extends HTMLElement {\n  constructor() {\n    super();\n    this.__instanceProperties = new Map();\n    /**\r\n     * True if there is a pending update as a result of calling `requestUpdate()`.\r\n     * Should only be read.\r\n     * @category updates\r\n     */\n\n    this.isUpdatePending = false;\n    /**\r\n     * Is set to `true` after the first update. The element code cannot assume\r\n     * that `renderRoot` exists before the element `hasUpdated`.\r\n     * @category updates\r\n     */\n\n    this.hasUpdated = false;\n    /**\r\n     * Name of currently reflecting property\r\n     */\n\n    this.__reflectingProperty = null;\n\n    this._initialize();\n  }\n  /**\r\n   * Adds an initializer function to the class that is called during instance\r\n   * construction.\r\n   *\r\n   * This is useful for code that runs against a `ReactiveElement`\r\n   * subclass, such as a decorator, that needs to do work for each\r\n   * instance, such as setting up a `ReactiveController`.\r\n   *\r\n   * ```ts\r\n   * const myDecorator = (target: typeof ReactiveElement, key: string) => {\r\n   *   target.addInitializer((instance: ReactiveElement) => {\r\n   *     // This is run during construction of the element\r\n   *     new MyController(instance);\r\n   *   });\r\n   * }\r\n   * ```\r\n   *\r\n   * Decorating a field will then cause each instance to run an initializer\r\n   * that adds a controller:\r\n   *\r\n   * ```ts\r\n   * class MyElement extends LitElement {\r\n   *   @myDecorator foo;\r\n   * }\r\n   * ```\r\n   *\r\n   * Initializers are stored per-constructor. Adding an initializer to a\r\n   * subclass does not add it to a superclass. Since initializers are run in\r\n   * constructors, initializers will run in order of the class hierarchy,\r\n   * starting with superclasses and progressing to the instance's class.\r\n   *\r\n   * @nocollapse\r\n   */\n\n\n  static addInitializer(initializer) {\n    var _a;\n\n    (_a = this._initializers) !== null && _a !== void 0 ? _a : this._initializers = [];\n\n    this._initializers.push(initializer);\n  }\n  /**\r\n   * Returns a list of attributes corresponding to the registered properties.\r\n   * @nocollapse\r\n   * @category attributes\r\n   */\n\n\n  static get observedAttributes() {\n    // note: piggy backing on this to ensure we're finalized.\n    this.finalize();\n    const attributes = []; // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n\n    this.elementProperties.forEach((v, p) => {\n      const attr = this.__attributeNameForProperty(p, v);\n\n      if (attr !== undefined) {\n        this.__attributeToPropertyMap.set(attr, p);\n\n        attributes.push(attr);\n      }\n    });\n    return attributes;\n  }\n  /**\r\n   * Creates a property accessor on the element prototype if one does not exist\r\n   * and stores a `PropertyDeclaration` for the property with the given options.\r\n   * The property setter calls the property's `hasChanged` property option\r\n   * or uses a strict identity check to determine whether or not to request\r\n   * an update.\r\n   *\r\n   * This method may be overridden to customize properties; however,\r\n   * when doing so, it's important to call `super.createProperty` to ensure\r\n   * the property is setup correctly. This method calls\r\n   * `getPropertyDescriptor` internally to get a descriptor to install.\r\n   * To customize what properties do when they are get or set, override\r\n   * `getPropertyDescriptor`. To customize the options for a property,\r\n   * implement `createProperty` like this:\r\n   *\r\n   * ```ts\r\n   * static createProperty(name, options) {\r\n   *   options = Object.assign(options, {myOption: true});\r\n   *   super.createProperty(name, options);\r\n   * }\r\n   * ```\r\n   *\r\n   * @nocollapse\r\n   * @category properties\r\n   */\n\n\n  static createProperty(name, options = defaultPropertyDeclaration) {\n    var _a; // if this is a state property, force the attribute to false.\n\n\n    if (options.state) {\n      // Cast as any since this is readonly.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      options.attribute = false;\n    } // Note, since this can be called by the `@property` decorator which\n    // is called before `finalize`, we ensure finalization has been kicked off.\n\n\n    this.finalize();\n    this.elementProperties.set(name, options); // Do not generate an accessor if the prototype already has one, since\n    // it would be lost otherwise and that would never be the user's intention;\n    // Instead, we expect users to call `requestUpdate` themselves from\n    // user-defined accessors. Note that if the super has an accessor we will\n    // still overwrite it\n\n    if (!options.noAccessor && !this.prototype.hasOwnProperty(name)) {\n      const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n      const descriptor = this.getPropertyDescriptor(name, key, options);\n\n      if (descriptor !== undefined) {\n        Object.defineProperty(this.prototype, name, descriptor);\n\n        if (DEV_MODE) {\n          // If this class doesn't have its own set, create one and initialize\n          // with the values in the set from the nearest ancestor class, if any.\n          if (!this.hasOwnProperty('__reactivePropertyKeys')) {\n            this.__reactivePropertyKeys = new Set((_a = this.__reactivePropertyKeys) !== null && _a !== void 0 ? _a : []);\n          }\n\n          this.__reactivePropertyKeys.add(name);\n        }\n      }\n    }\n  }\n  /**\r\n   * Returns a property descriptor to be defined on the given named property.\r\n   * If no descriptor is returned, the property will not become an accessor.\r\n   * For example,\r\n   *\r\n   * ```ts\r\n   * class MyElement extends LitElement {\r\n   *   static getPropertyDescriptor(name, key, options) {\r\n   *     const defaultDescriptor =\r\n   *         super.getPropertyDescriptor(name, key, options);\r\n   *     const setter = defaultDescriptor.set;\r\n   *     return {\r\n   *       get: defaultDescriptor.get,\r\n   *       set(value) {\r\n   *         setter.call(this, value);\r\n   *         // custom action.\r\n   *       },\r\n   *       configurable: true,\r\n   *       enumerable: true\r\n   *     }\r\n   *   }\r\n   * }\r\n   * ```\r\n   *\r\n   * @nocollapse\r\n   * @category properties\r\n   */\n\n\n  static getPropertyDescriptor(name, key, options) {\n    return {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      get() {\n        return this[key];\n      },\n\n      set(value) {\n        const oldValue = this[name];\n        this[key] = value;\n        this.requestUpdate(name, oldValue, options);\n      },\n\n      configurable: true,\n      enumerable: true\n    };\n  }\n  /**\r\n   * Returns the property options associated with the given property.\r\n   * These options are defined with a `PropertyDeclaration` via the `properties`\r\n   * object or the `@property` decorator and are registered in\r\n   * `createProperty(...)`.\r\n   *\r\n   * Note, this method should be considered \"final\" and not overridden. To\r\n   * customize the options for a given property, override [[`createProperty`]].\r\n   *\r\n   * @nocollapse\r\n   * @final\r\n   * @category properties\r\n   */\n\n\n  static getPropertyOptions(name) {\n    return this.elementProperties.get(name) || defaultPropertyDeclaration;\n  }\n  /**\r\n   * Creates property accessors for registered properties, sets up element\r\n   * styling, and ensures any superclasses are also finalized. Returns true if\r\n   * the element was finalized.\r\n   * @nocollapse\r\n   */\n\n\n  static finalize() {\n    if (this.hasOwnProperty(finalized)) {\n      return false;\n    }\n\n    this[finalized] = true; // finalize any superclasses\n\n    const superCtor = Object.getPrototypeOf(this);\n    superCtor.finalize();\n    this.elementProperties = new Map(superCtor.elementProperties); // initialize Map populated in observedAttributes\n\n    this.__attributeToPropertyMap = new Map(); // make any properties\n    // Note, only process \"own\" properties since this element will inherit\n    // any properties defined on the superClass, and finalization ensures\n    // the entire prototype chain is finalized.\n\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties; // support symbols in properties (IE11 does not support this)\n\n      const propKeys = [...Object.getOwnPropertyNames(props), ...Object.getOwnPropertySymbols(props)]; // This for/of is ok because propKeys is an array\n\n      for (const p of propKeys) {\n        // note, use of `any` is due to TypeScript lack of support for symbol in\n        // index types\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.createProperty(p, props[p]);\n      }\n    }\n\n    this.elementStyles = this.finalizeStyles(this.styles); // DEV mode warnings\n\n    if (DEV_MODE) {\n      const warnRemovedOrRenamed = (name, renamed = false) => {\n        if (this.prototype.hasOwnProperty(name)) {\n          issueWarning(renamed ? 'renamed-api' : 'removed-api', `\\`${name}\\` is implemented on class ${this.name}. It ` + `has been ${renamed ? 'renamed' : 'removed'} ` + `in this version of LitElement.`);\n        }\n      };\n\n      warnRemovedOrRenamed('initialize');\n      warnRemovedOrRenamed('requestUpdateInternal');\n      warnRemovedOrRenamed('_getUpdateComplete', true);\n    }\n\n    return true;\n  }\n  /**\r\n   * Takes the styles the user supplied via the `static styles` property and\r\n   * returns the array of styles to apply to the element.\r\n   * Override this method to integrate into a style management system.\r\n   *\r\n   * Styles are deduplicated preserving the _last_ instance in the list. This\r\n   * is a performance optimization to avoid duplicated styles that can occur\r\n   * especially when composing via subclassing. The last item is kept to try\r\n   * to preserve the cascade order with the assumption that it's most important\r\n   * that last added styles override previous styles.\r\n   *\r\n   * @nocollapse\r\n   * @category styles\r\n   */\n\n\n  static finalizeStyles(styles) {\n    const elementStyles = [];\n\n    if (Array.isArray(styles)) {\n      // Dedupe the flattened array in reverse order to preserve the last items.\n      // Casting to Array<unknown> works around TS error that\n      // appears to come from trying to flatten a type CSSResultArray.\n      const set = new Set(styles.flat(Infinity).reverse()); // Then preserve original order by adding the set items in reverse order.\n\n      for (const s of set) {\n        elementStyles.unshift(getCompatibleStyle(s));\n      }\n    } else if (styles !== undefined) {\n      elementStyles.push(getCompatibleStyle(styles));\n    }\n\n    return elementStyles;\n  }\n  /**\r\n   * Returns the property name for the given attribute `name`.\r\n   * @nocollapse\r\n   */\n\n\n  static __attributeNameForProperty(name, options) {\n    const attribute = options.attribute;\n    return attribute === false ? undefined : typeof attribute === 'string' ? attribute : typeof name === 'string' ? name.toLowerCase() : undefined;\n  }\n  /**\r\n   * Internal only override point for customizing work done when elements\r\n   * are constructed.\r\n   *\r\n   * @internal\r\n   */\n\n\n  _initialize() {\n    var _a;\n\n    this.__updatePromise = new Promise(res => this.enableUpdating = res);\n    this._$changedProperties = new Map();\n\n    this.__saveInstanceProperties(); // ensures first update will be caught by an early access of\n    // `updateComplete`\n\n\n    this.requestUpdate();\n    (_a = this.constructor._initializers) === null || _a === void 0 ? void 0 : _a.forEach(i => i(this));\n  }\n  /**\r\n   * Registers a `ReactiveController` to participate in the element's reactive\r\n   * update cycle. The element automatically calls into any registered\r\n   * controllers during its lifecycle callbacks.\r\n   *\r\n   * If the element is connected when `addController()` is called, the\r\n   * controller's `hostConnected()` callback will be immediately called.\r\n   * @category controllers\r\n   */\n\n\n  addController(controller) {\n    var _a, _b;\n\n    ((_a = this.__controllers) !== null && _a !== void 0 ? _a : this.__controllers = []).push(controller); // If a controller is added after the element has been connected,\n    // call hostConnected. Note, re-using existence of `renderRoot` here\n    // (which is set in connectedCallback) to avoid the need to track a\n    // first connected state.\n\n    if (this.renderRoot !== undefined && this.isConnected) {\n      (_b = controller.hostConnected) === null || _b === void 0 ? void 0 : _b.call(controller);\n    }\n  }\n  /**\r\n   * Removes a `ReactiveController` from the element.\r\n   * @category controllers\r\n   */\n\n\n  removeController(controller) {\n    var _a; // Note, if the indexOf is -1, the >>> will flip the sign which makes the\n    // splice do nothing.\n\n\n    (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.splice(this.__controllers.indexOf(controller) >>> 0, 1);\n  }\n  /**\r\n   * Fixes any properties set on the instance before upgrade time.\r\n   * Otherwise these would shadow the accessor and break these properties.\r\n   * The properties are stored in a Map which is played back after the\r\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\r\n   * (<=41), properties created for native platform properties like (`id` or\r\n   * `name`) may not have default values set in the element constructor. On\r\n   * these browsers native properties appear on instances and therefore their\r\n   * default value will overwrite any element default (e.g. if the element sets\r\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\r\n   * the native platform default).\r\n   */\n\n\n  __saveInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    this.constructor.elementProperties.forEach((_v, p) => {\n      if (this.hasOwnProperty(p)) {\n        this.__instanceProperties.set(p, this[p]);\n\n        delete this[p];\n      }\n    });\n  }\n  /**\r\n   * Returns the node into which the element should render and by default\r\n   * creates and returns an open shadowRoot. Implement to customize where the\r\n   * element's DOM is rendered. For example, to render into the element's\r\n   * childNodes, return `this`.\r\n   *\r\n   * @return Returns a node into which to render.\r\n   * @category rendering\r\n   */\n\n\n  createRenderRoot() {\n    var _a;\n\n    const renderRoot = (_a = this.shadowRoot) !== null && _a !== void 0 ? _a : this.attachShadow(this.constructor.shadowRootOptions);\n    adoptStyles(renderRoot, this.constructor.elementStyles);\n    return renderRoot;\n  }\n  /**\r\n   * On first connection, creates the element's renderRoot, sets up\r\n   * element styling, and enables updating.\r\n   * @category lifecycle\r\n   */\n\n\n  connectedCallback() {\n    var _a; // create renderRoot before first update.\n\n\n    if (this.renderRoot === undefined) {\n      this.renderRoot = this.createRenderRoot();\n    }\n\n    this.enableUpdating(true);\n    (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.forEach(c => {\n      var _a;\n\n      return (_a = c.hostConnected) === null || _a === void 0 ? void 0 : _a.call(c);\n    });\n  }\n  /**\r\n   * Note, this method should be considered final and not overridden. It is\r\n   * overridden on the element instance with a function that triggers the first\r\n   * update.\r\n   * @category updates\r\n   */\n\n\n  enableUpdating(_requestedUpdate) {}\n  /**\r\n   * Allows for `super.disconnectedCallback()` in extensions while\r\n   * reserving the possibility of making non-breaking feature additions\r\n   * when disconnecting at some point in the future.\r\n   * @category lifecycle\r\n   */\n\n\n  disconnectedCallback() {\n    var _a;\n\n    (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.forEach(c => {\n      var _a;\n\n      return (_a = c.hostDisconnected) === null || _a === void 0 ? void 0 : _a.call(c);\n    });\n  }\n  /**\r\n   * Synchronizes property values when attributes change.\r\n   * @category attributes\r\n   */\n\n\n  attributeChangedCallback(name, _old, value) {\n    this._$attributeToProperty(name, value);\n  }\n\n  __propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n    var _a, _b;\n\n    const attr = this.constructor.__attributeNameForProperty(name, options);\n\n    if (attr !== undefined && options.reflect === true) {\n      const toAttribute = (_b = (_a = options.converter) === null || _a === void 0 ? void 0 : _a.toAttribute) !== null && _b !== void 0 ? _b : defaultConverter.toAttribute;\n      const attrValue = toAttribute(value, options.type);\n\n      if (DEV_MODE && this.constructor.enabledWarnings.indexOf('migration') >= 0 && attrValue === undefined) {\n        issueWarning('undefined-attribute-value', `The attribute value for the ${name} property is ` + `undefined on element ${this.localName}. The attribute will be ` + `removed, but in the previous version of \\`ReactiveElement\\`, ` + `the attribute would not have changed.`);\n      } // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n\n\n      this.__reflectingProperty = name;\n\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue);\n      } // mark state not reflecting\n\n\n      this.__reflectingProperty = null;\n    }\n  }\n  /** @internal */\n\n\n  _$attributeToProperty(name, value) {\n    var _a, _b, _c;\n\n    const ctor = this.constructor; // Note, hint this as an `AttributeMap` so closure clearly understands\n    // the type; it has issues with tracking types through statics\n\n    const propName = ctor.__attributeToPropertyMap.get(name); // Use tracking info to avoid reflecting a property value to an attribute\n    // if it was just set because the attribute changed.\n\n\n    if (propName !== undefined && this.__reflectingProperty !== propName) {\n      const options = ctor.getPropertyOptions(propName);\n      const converter = options.converter;\n      const fromAttribute = (_c = (_b = (_a = converter) === null || _a === void 0 ? void 0 : _a.fromAttribute) !== null && _b !== void 0 ? _b : typeof converter === 'function' ? converter : null) !== null && _c !== void 0 ? _c : defaultConverter.fromAttribute; // mark state reflecting\n\n      this.__reflectingProperty = propName; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      this[propName] = fromAttribute(value, options.type); // mark state not reflecting\n\n      this.__reflectingProperty = null;\n    }\n  }\n  /**\r\n   * Requests an update which is processed asynchronously. This should be called\r\n   * when an element should update based on some state not triggered by setting\r\n   * a reactive property. In this case, pass no arguments. It should also be\r\n   * called when manually implementing a property setter. In this case, pass the\r\n   * property `name` and `oldValue` to ensure that any configured property\r\n   * options are honored.\r\n   *\r\n   * @param name name of requesting property\r\n   * @param oldValue old value of requesting property\r\n   * @param options property options to use instead of the previously\r\n   *     configured options\r\n   * @category updates\r\n   */\n\n\n  requestUpdate(name, oldValue, options) {\n    let shouldRequestUpdate = true; // If we have a property key, perform property update steps.\n\n    if (name !== undefined) {\n      options = options || this.constructor.getPropertyOptions(name);\n      const hasChanged = options.hasChanged || notEqual;\n\n      if (hasChanged(this[name], oldValue)) {\n        if (!this._$changedProperties.has(name)) {\n          this._$changedProperties.set(name, oldValue);\n        } // Add to reflecting properties set.\n        // Note, it's important that every change has a chance to add the\n        // property to `_reflectingProperties`. This ensures setting\n        // attribute + property reflects correctly.\n\n\n        if (options.reflect === true && this.__reflectingProperty !== name) {\n          if (this.__reflectingProperties === undefined) {\n            this.__reflectingProperties = new Map();\n          }\n\n          this.__reflectingProperties.set(name, options);\n        }\n      } else {\n        // Abort the request if the property should not be considered changed.\n        shouldRequestUpdate = false;\n      }\n    }\n\n    if (!this.isUpdatePending && shouldRequestUpdate) {\n      this.__updatePromise = this.__enqueueUpdate();\n    } // Note, since this no longer returns a promise, in dev mode we return a\n    // thenable which warns if it's called.\n\n\n    return DEV_MODE ? requestUpdateThenable(this.localName) : undefined;\n  }\n  /**\r\n   * Sets up the element to asynchronously update.\r\n   */\n\n\n  __enqueueUpdate() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.isUpdatePending = true;\n\n      try {\n        // Ensure any previous update has resolved before updating.\n        // This `await` also ensures that property changes are batched.\n        yield _this.__updatePromise;\n      } catch (e) {\n        // Refire any previous errors async so they do not disrupt the update\n        // cycle. Errors are refired so developers have a chance to observe\n        // them, and this can be done by implementing\n        // `window.onunhandledrejection`.\n        Promise.reject(e);\n      }\n\n      const result = _this.scheduleUpdate(); // If `scheduleUpdate` returns a Promise, we await it. This is done to\n      // enable coordinating updates with a scheduler. Note, the result is\n      // checked to avoid delaying an additional microtask unless we need to.\n\n\n      if (result != null) {\n        yield result;\n      }\n\n      return !_this.isUpdatePending;\n    })();\n  }\n  /**\r\n   * Schedules an element update. You can override this method to change the\r\n   * timing of updates by returning a Promise. The update will await the\r\n   * returned Promise, and you should resolve the Promise to allow the update\r\n   * to proceed. If this method is overridden, `super.scheduleUpdate()`\r\n   * must be called.\r\n   *\r\n   * For instance, to schedule updates to occur just before the next frame:\r\n   *\r\n   * ```ts\r\n   * override protected async scheduleUpdate(): Promise<unknown> {\r\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\r\n   *   super.scheduleUpdate();\r\n   * }\r\n   * ```\r\n   * @category updates\r\n   */\n\n\n  scheduleUpdate() {\n    return this.performUpdate();\n  }\n  /**\r\n   * Performs an element update. Note, if an exception is thrown during the\r\n   * update, `firstUpdated` and `updated` will not be called.\r\n   *\r\n   * Call `performUpdate()` to immediately process a pending update. This should\r\n   * generally not be needed, but it can be done in rare cases when you need to\r\n   * update synchronously.\r\n   *\r\n   * Note: To ensure `performUpdate()` synchronously completes a pending update,\r\n   * it should not be overridden. In LitElement 2.x it was suggested to override\r\n   * `performUpdate()` to also customizing update scheduling. Instead, you should now\r\n   * override `scheduleUpdate()`. For backwards compatibility with LitElement 2.x,\r\n   * scheduling updates via `performUpdate()` continues to work, but will make\r\n   * also calling `performUpdate()` to synchronously process updates difficult.\r\n   *\r\n   * @category updates\r\n   */\n\n\n  performUpdate() {\n    var _a, _b; // Abort any update if one is not pending when this is called.\n    // This can happen if `performUpdate` is called early to \"flush\"\n    // the update.\n\n\n    if (!this.isUpdatePending) {\n      return;\n    } // create renderRoot before first update.\n\n\n    if (!this.hasUpdated) {\n      // Produce warning if any class properties are shadowed by class fields\n      if (DEV_MODE) {\n        const shadowedProperties = [];\n        (_a = this.constructor.__reactivePropertyKeys) === null || _a === void 0 ? void 0 : _a.forEach(p => {\n          var _a;\n\n          if (this.hasOwnProperty(p) && !((_a = this.__instanceProperties) === null || _a === void 0 ? void 0 : _a.has(p))) {\n            shadowedProperties.push(p);\n          }\n        });\n\n        if (shadowedProperties.length) {\n          throw new Error(`The following properties on element ${this.localName} will not ` + `trigger updates as expected because they are set using class ` + `fields: ${shadowedProperties.join(', ')}. ` + `Native class fields and some compiled output will overwrite ` + `accessors used for detecting changes. See ` + `https://lit.dev/msg/class-field-shadowing ` + `for more information.`);\n        }\n      }\n    } // Mixin instance properties once, if they exist.\n\n\n    if (this.__instanceProperties) {\n      // Use forEach so this works even if for/of loops are compiled to for loops\n      // expecting arrays\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.__instanceProperties.forEach((v, p) => this[p] = v);\n\n      this.__instanceProperties = undefined;\n    }\n\n    let shouldUpdate = false;\n    const changedProperties = this._$changedProperties;\n\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n\n      if (shouldUpdate) {\n        this.willUpdate(changedProperties);\n        (_b = this.__controllers) === null || _b === void 0 ? void 0 : _b.forEach(c => {\n          var _a;\n\n          return (_a = c.hostUpdate) === null || _a === void 0 ? void 0 : _a.call(c);\n        });\n        this.update(changedProperties);\n      } else {\n        this.__markUpdated();\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false; // Ensure element can accept additional updates after an exception.\n\n      this.__markUpdated();\n\n      throw e;\n    } // The update is no longer considered pending and further updates are now allowed.\n\n\n    if (shouldUpdate) {\n      this._$didUpdate(changedProperties);\n    }\n  }\n  /**\r\n   * @category updates\r\n   */\n\n\n  willUpdate(_changedProperties) {} // Note, this is an override point for polyfill-support.\n  // @internal\n\n\n  _$didUpdate(changedProperties) {\n    var _a;\n\n    (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.forEach(c => {\n      var _a;\n\n      return (_a = c.hostUpdated) === null || _a === void 0 ? void 0 : _a.call(c);\n    });\n\n    if (!this.hasUpdated) {\n      this.hasUpdated = true;\n      this.firstUpdated(changedProperties);\n    }\n\n    this.updated(changedProperties);\n\n    if (DEV_MODE && this.isUpdatePending && this.constructor.enabledWarnings.indexOf('change-in-update') >= 0) {\n      issueWarning('change-in-update', `Element ${this.localName} scheduled an update ` + `(generally because a property was set) ` + `after an update completed, causing a new update to be scheduled. ` + `This is inefficient and should be avoided unless the next update ` + `can only be scheduled as a side effect of the previous update.`);\n    }\n  }\n\n  __markUpdated() {\n    this._$changedProperties = new Map();\n    this.isUpdatePending = false;\n  }\n  /**\r\n   * Returns a Promise that resolves when the element has completed updating.\r\n   * The Promise value is a boolean that is `true` if the element completed the\r\n   * update without triggering another update. The Promise result is `false` if\r\n   * a property was set inside `updated()`. If the Promise is rejected, an\r\n   * exception was thrown during the update.\r\n   *\r\n   * To await additional asynchronous work, override the `getUpdateComplete`\r\n   * method. For example, it is sometimes useful to await a rendered element\r\n   * before fulfilling this Promise. To do this, first await\r\n   * `super.getUpdateComplete()`, then any subsequent state.\r\n   *\r\n   * @return A promise of a boolean that resolves to true if the update completed\r\n   *     without triggering another update.\r\n   * @category updates\r\n   */\n\n\n  get updateComplete() {\n    return this.getUpdateComplete();\n  }\n  /**\r\n   * Override point for the `updateComplete` promise.\r\n   *\r\n   * It is not safe to override the `updateComplete` getter directly due to a\r\n   * limitation in TypeScript which means it is not possible to call a\r\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\r\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\r\n   * This method should be overridden instead. For example:\r\n   *\r\n   * ```ts\r\n   * class MyElement extends LitElement {\r\n   *   override async getUpdateComplete() {\r\n   *     const result = await super.getUpdateComplete();\r\n   *     await this._myChild.updateComplete;\r\n   *     return result;\r\n   *   }\r\n   * }\r\n   * ```\r\n   *\r\n   * @return A promise of a boolean that resolves to true if the update completed\r\n   *     without triggering another update.\r\n   * @category updates\r\n   */\n\n\n  getUpdateComplete() {\n    return this.__updatePromise;\n  }\n  /**\r\n   * Controls whether or not `update()` should be called when the element requests\r\n   * an update. By default, this method always returns `true`, but this can be\r\n   * customized to control when to update.\r\n   *\r\n   * @param _changedProperties Map of changed properties with old values\r\n   * @category updates\r\n   */\n\n\n  shouldUpdate(_changedProperties) {\n    return true;\n  }\n  /**\r\n   * Updates the element. This method reflects property values to attributes.\r\n   * It can be overridden to render and keep updated element DOM.\r\n   * Setting properties inside this method will *not* trigger\r\n   * another update.\r\n   *\r\n   * @param _changedProperties Map of changed properties with old values\r\n   * @category updates\r\n   */\n\n\n  update(_changedProperties) {\n    if (this.__reflectingProperties !== undefined) {\n      // Use forEach so this works even if for/of loops are compiled to for\n      // loops expecting arrays\n      this.__reflectingProperties.forEach((v, k) => this.__propertyToAttribute(k, this[k], v));\n\n      this.__reflectingProperties = undefined;\n    }\n\n    this.__markUpdated();\n  }\n  /**\r\n   * Invoked whenever the element is updated. Implement to perform\r\n   * post-updating tasks via DOM APIs, for example, focusing an element.\r\n   *\r\n   * Setting properties inside this method will trigger the element to update\r\n   * again after this update cycle completes.\r\n   *\r\n   * @param _changedProperties Map of changed properties with old values\r\n   * @category updates\r\n   */\n\n\n  updated(_changedProperties) {}\n  /**\r\n   * Invoked when the element is first updated. Implement to perform one time\r\n   * work on the element after update.\r\n   *\r\n   * Setting properties inside this method will trigger the element to update\r\n   * again after this update cycle completes.\r\n   *\r\n   * @param _changedProperties Map of changed properties with old values\r\n   * @category updates\r\n   */\n\n\n  firstUpdated(_changedProperties) {}\n\n}\n_d = finalized;\n/**\r\n * Marks class as having finished creating properties.\r\n */\n\nReactiveElement[_d] = true;\n/**\r\n * Memoized list of all element properties, including any superclass properties.\r\n * Created lazily on user subclasses when finalizing the class.\r\n * @nocollapse\r\n * @category properties\r\n */\n\nReactiveElement.elementProperties = new Map();\n/**\r\n * Memoized list of all element styles.\r\n * Created lazily on user subclasses when finalizing the class.\r\n * @nocollapse\r\n * @category styles\r\n */\n\nReactiveElement.elementStyles = [];\n/**\r\n * Options used when calling `attachShadow`. Set this property to customize\r\n * the options for the shadowRoot; for example, to create a closed\r\n * shadowRoot: `{mode: 'closed'}`.\r\n *\r\n * Note, these options are used in `createRenderRoot`. If this method\r\n * is customized, options should be respected if possible.\r\n * @nocollapse\r\n * @category rendering\r\n */\n\nReactiveElement.shadowRootOptions = {\n  mode: 'open'\n}; // Apply polyfills if available\n\npolyfillSupport === null || polyfillSupport === void 0 ? void 0 : polyfillSupport({\n  ReactiveElement\n}); // Dev mode warnings...\n\nif (DEV_MODE) {\n  // Default warning set.\n  ReactiveElement.enabledWarnings = ['change-in-update'];\n\n  const ensureOwnWarnings = function (ctor) {\n    if (!ctor.hasOwnProperty(JSCompiler_renameProperty('enabledWarnings', ctor))) {\n      ctor.enabledWarnings = ctor.enabledWarnings.slice();\n    }\n  };\n\n  ReactiveElement.enableWarning = function (warning) {\n    ensureOwnWarnings(this);\n\n    if (this.enabledWarnings.indexOf(warning) < 0) {\n      this.enabledWarnings.push(warning);\n    }\n  };\n\n  ReactiveElement.disableWarning = function (warning) {\n    ensureOwnWarnings(this);\n    const i = this.enabledWarnings.indexOf(warning);\n\n    if (i >= 0) {\n      this.enabledWarnings.splice(i, 1);\n    }\n  };\n} // IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for ReactiveElement usage.\n\n\n((_c = globalThis.reactiveElementVersions) !== null && _c !== void 0 ? _c : globalThis.reactiveElementVersions = []).push('1.0.2');\n\nif (DEV_MODE && globalThis.reactiveElementVersions.length > 1) {\n  issueWarning('multiple-versions', `Multiple versions of Lit loaded. Loading multiple versions ` + `is not recommended.`);\n} //# sourceMappingURL=reactive-element.js.map","map":{"version":3,"sources":["C:/Users/admin/Music/Angular/Project/traininngs-ui/node_modules/@lit/reactive-element/development/reactive-element.js"],"names":["_a","_b","_c","_d","getCompatibleStyle","adoptStyles","DEV_MODE","requestUpdateThenable","issueWarning","trustedTypes","window","emptyStringForBooleanAttribute","emptyScript","polyfillSupport","reactiveElementPolyfillSupportDevMode","reactiveElementPolyfillSupport","issuedWarnings","globalThis","litIssuedWarnings","Set","code","warning","has","console","warn","add","ShadyDOM","inUse","undefined","name","then","onfulfilled","_onrejected","JSCompiler_renameProperty","prop","_obj","defaultConverter","toAttribute","value","type","Boolean","Object","Array","JSON","stringify","fromAttribute","fromValue","Number","parse","e","notEqual","old","defaultPropertyDeclaration","attribute","String","converter","reflect","hasChanged","finalized","ReactiveElement","HTMLElement","constructor","__instanceProperties","Map","isUpdatePending","hasUpdated","__reflectingProperty","_initialize","addInitializer","initializer","_initializers","push","observedAttributes","finalize","attributes","elementProperties","forEach","v","p","attr","__attributeNameForProperty","__attributeToPropertyMap","set","createProperty","options","state","noAccessor","prototype","hasOwnProperty","key","Symbol","descriptor","getPropertyDescriptor","defineProperty","__reactivePropertyKeys","get","oldValue","requestUpdate","configurable","enumerable","getPropertyOptions","superCtor","getPrototypeOf","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","elementStyles","finalizeStyles","styles","warnRemovedOrRenamed","renamed","isArray","flat","Infinity","reverse","s","unshift","toLowerCase","__updatePromise","Promise","res","enableUpdating","_$changedProperties","__saveInstanceProperties","i","addController","controller","__controllers","renderRoot","isConnected","hostConnected","call","removeController","splice","indexOf","_v","createRenderRoot","shadowRoot","attachShadow","shadowRootOptions","connectedCallback","c","_requestedUpdate","disconnectedCallback","hostDisconnected","attributeChangedCallback","_old","_$attributeToProperty","__propertyToAttribute","attrValue","enabledWarnings","localName","removeAttribute","setAttribute","ctor","propName","shouldRequestUpdate","__reflectingProperties","__enqueueUpdate","reject","result","scheduleUpdate","performUpdate","shadowedProperties","length","Error","join","shouldUpdate","changedProperties","willUpdate","hostUpdate","update","__markUpdated","_$didUpdate","_changedProperties","hostUpdated","firstUpdated","updated","updateComplete","getUpdateComplete","k","mode","ensureOwnWarnings","slice","enableWarning","disableWarning","reactiveElementVersions"],"mappings":"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","sourcesContent":["/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n * SPDX-License-Identifier: BSD-3-Clause\r\n */\r\nvar _a, _b, _c;\r\nvar _d;\r\n/**\r\n * Use this module if you want to create your own base class extending\r\n * [[ReactiveElement]].\r\n * @packageDocumentation\r\n */\r\nimport { getCompatibleStyle, adoptStyles, } from './css-tag.js';\r\nexport * from './css-tag.js';\r\nconst DEV_MODE = true;\r\nlet requestUpdateThenable;\r\nlet issueWarning;\r\nconst trustedTypes = window\r\n    .trustedTypes;\r\n// Temporary workaround for https://crbug.com/993268\r\n// Currently, any attribute starting with \"on\" is considered to be a\r\n// TrustedScript source. Such boolean attributes must be set to the equivalent\r\n// trusted emptyScript value.\r\nconst emptyStringForBooleanAttribute = trustedTypes\r\n    ? trustedTypes.emptyScript\r\n    : '';\r\nconst polyfillSupport = DEV_MODE\r\n    ? window.reactiveElementPolyfillSupportDevMode\r\n    : window.reactiveElementPolyfillSupport;\r\nif (DEV_MODE) {\r\n    // Ensure warnings are issued only 1x, even if multiple versions of Lit\r\n    // are loaded.\r\n    const issuedWarnings = ((_a = globalThis.litIssuedWarnings) !== null && _a !== void 0 ? _a : (globalThis.litIssuedWarnings = new Set()));\r\n    // Issue a warning, if we haven't already.\r\n    issueWarning = (code, warning) => {\r\n        warning += ` See https://lit.dev/msg/${code} for more information.`;\r\n        if (!issuedWarnings.has(warning)) {\r\n            console.warn(warning);\r\n            issuedWarnings.add(warning);\r\n        }\r\n    };\r\n    issueWarning('dev-mode', `Lit is in dev mode. Not recommended for production!`);\r\n    // Issue polyfill support warning.\r\n    if (((_b = window.ShadyDOM) === null || _b === void 0 ? void 0 : _b.inUse) && polyfillSupport === undefined) {\r\n        issueWarning('polyfill-support-missing', `Shadow DOM is being polyfilled via \\`ShadyDOM\\` but ` +\r\n            `the \\`polyfill-support\\` module has not been loaded.`);\r\n    }\r\n    requestUpdateThenable = (name) => ({\r\n        then: (onfulfilled, _onrejected) => {\r\n            issueWarning('request-update-promise', `The \\`requestUpdate\\` method should no longer return a Promise but ` +\r\n                `does so on \\`${name}\\`. Use \\`updateComplete\\` instead.`);\r\n            if (onfulfilled !== undefined) {\r\n                onfulfilled(false);\r\n            }\r\n        },\r\n    });\r\n}\r\n/*\r\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\r\n * replaced at compile time by the munged name for object[property]. We cannot\r\n * alias this function, so we have to use a small shim that has the same\r\n * behavior when not compiling.\r\n */\r\n/*@__INLINE__*/\r\nconst JSCompiler_renameProperty = (prop, _obj) => prop;\r\nexport const defaultConverter = {\r\n    toAttribute(value, type) {\r\n        switch (type) {\r\n            case Boolean:\r\n                value = value ? emptyStringForBooleanAttribute : null;\r\n                break;\r\n            case Object:\r\n            case Array:\r\n                // if the value is `null` or `undefined` pass this through\r\n                // to allow removing/no change behavior.\r\n                value = value == null ? value : JSON.stringify(value);\r\n                break;\r\n        }\r\n        return value;\r\n    },\r\n    fromAttribute(value, type) {\r\n        let fromValue = value;\r\n        switch (type) {\r\n            case Boolean:\r\n                fromValue = value !== null;\r\n                break;\r\n            case Number:\r\n                fromValue = value === null ? null : Number(value);\r\n                break;\r\n            case Object:\r\n            case Array:\r\n                // Do *not* generate exception when invalid JSON is set as elements\r\n                // don't normally complain on being mis-configured.\r\n                // TODO(sorvell): Do generate exception in *dev mode*.\r\n                try {\r\n                    // Assert to adhere to Bazel's \"must type assert JSON parse\" rule.\r\n                    fromValue = JSON.parse(value);\r\n                }\r\n                catch (e) {\r\n                    fromValue = null;\r\n                }\r\n                break;\r\n        }\r\n        return fromValue;\r\n    },\r\n};\r\n/**\r\n * Change function that returns true if `value` is different from `oldValue`.\r\n * This method is used as the default for a property's `hasChanged` function.\r\n */\r\nexport const notEqual = (value, old) => {\r\n    // This ensures (old==NaN, value==NaN) always returns false\r\n    return old !== value && (old === old || value === value);\r\n};\r\nconst defaultPropertyDeclaration = {\r\n    attribute: true,\r\n    type: String,\r\n    converter: defaultConverter,\r\n    reflect: false,\r\n    hasChanged: notEqual,\r\n};\r\n/**\r\n * The Closure JS Compiler doesn't currently have good support for static\r\n * property semantics where \"this\" is dynamic (e.g.\r\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\r\n * this hack to bypass any rewriting by the compiler.\r\n */\r\nconst finalized = 'finalized';\r\n/**\r\n * Base element class which manages element properties and attributes. When\r\n * properties change, the `update` method is asynchronously called. This method\r\n * should be supplied by subclassers to render updates as desired.\r\n * @noInheritDoc\r\n */\r\nexport class ReactiveElement extends HTMLElement {\r\n    constructor() {\r\n        super();\r\n        this.__instanceProperties = new Map();\r\n        /**\r\n         * True if there is a pending update as a result of calling `requestUpdate()`.\r\n         * Should only be read.\r\n         * @category updates\r\n         */\r\n        this.isUpdatePending = false;\r\n        /**\r\n         * Is set to `true` after the first update. The element code cannot assume\r\n         * that `renderRoot` exists before the element `hasUpdated`.\r\n         * @category updates\r\n         */\r\n        this.hasUpdated = false;\r\n        /**\r\n         * Name of currently reflecting property\r\n         */\r\n        this.__reflectingProperty = null;\r\n        this._initialize();\r\n    }\r\n    /**\r\n     * Adds an initializer function to the class that is called during instance\r\n     * construction.\r\n     *\r\n     * This is useful for code that runs against a `ReactiveElement`\r\n     * subclass, such as a decorator, that needs to do work for each\r\n     * instance, such as setting up a `ReactiveController`.\r\n     *\r\n     * ```ts\r\n     * const myDecorator = (target: typeof ReactiveElement, key: string) => {\r\n     *   target.addInitializer((instance: ReactiveElement) => {\r\n     *     // This is run during construction of the element\r\n     *     new MyController(instance);\r\n     *   });\r\n     * }\r\n     * ```\r\n     *\r\n     * Decorating a field will then cause each instance to run an initializer\r\n     * that adds a controller:\r\n     *\r\n     * ```ts\r\n     * class MyElement extends LitElement {\r\n     *   @myDecorator foo;\r\n     * }\r\n     * ```\r\n     *\r\n     * Initializers are stored per-constructor. Adding an initializer to a\r\n     * subclass does not add it to a superclass. Since initializers are run in\r\n     * constructors, initializers will run in order of the class hierarchy,\r\n     * starting with superclasses and progressing to the instance's class.\r\n     *\r\n     * @nocollapse\r\n     */\r\n    static addInitializer(initializer) {\r\n        var _a;\r\n        (_a = this._initializers) !== null && _a !== void 0 ? _a : (this._initializers = []);\r\n        this._initializers.push(initializer);\r\n    }\r\n    /**\r\n     * Returns a list of attributes corresponding to the registered properties.\r\n     * @nocollapse\r\n     * @category attributes\r\n     */\r\n    static get observedAttributes() {\r\n        // note: piggy backing on this to ensure we're finalized.\r\n        this.finalize();\r\n        const attributes = [];\r\n        // Use forEach so this works even if for/of loops are compiled to for loops\r\n        // expecting arrays\r\n        this.elementProperties.forEach((v, p) => {\r\n            const attr = this.__attributeNameForProperty(p, v);\r\n            if (attr !== undefined) {\r\n                this.__attributeToPropertyMap.set(attr, p);\r\n                attributes.push(attr);\r\n            }\r\n        });\r\n        return attributes;\r\n    }\r\n    /**\r\n     * Creates a property accessor on the element prototype if one does not exist\r\n     * and stores a `PropertyDeclaration` for the property with the given options.\r\n     * The property setter calls the property's `hasChanged` property option\r\n     * or uses a strict identity check to determine whether or not to request\r\n     * an update.\r\n     *\r\n     * This method may be overridden to customize properties; however,\r\n     * when doing so, it's important to call `super.createProperty` to ensure\r\n     * the property is setup correctly. This method calls\r\n     * `getPropertyDescriptor` internally to get a descriptor to install.\r\n     * To customize what properties do when they are get or set, override\r\n     * `getPropertyDescriptor`. To customize the options for a property,\r\n     * implement `createProperty` like this:\r\n     *\r\n     * ```ts\r\n     * static createProperty(name, options) {\r\n     *   options = Object.assign(options, {myOption: true});\r\n     *   super.createProperty(name, options);\r\n     * }\r\n     * ```\r\n     *\r\n     * @nocollapse\r\n     * @category properties\r\n     */\r\n    static createProperty(name, options = defaultPropertyDeclaration) {\r\n        var _a;\r\n        // if this is a state property, force the attribute to false.\r\n        if (options.state) {\r\n            // Cast as any since this is readonly.\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            options.attribute = false;\r\n        }\r\n        // Note, since this can be called by the `@property` decorator which\r\n        // is called before `finalize`, we ensure finalization has been kicked off.\r\n        this.finalize();\r\n        this.elementProperties.set(name, options);\r\n        // Do not generate an accessor if the prototype already has one, since\r\n        // it would be lost otherwise and that would never be the user's intention;\r\n        // Instead, we expect users to call `requestUpdate` themselves from\r\n        // user-defined accessors. Note that if the super has an accessor we will\r\n        // still overwrite it\r\n        if (!options.noAccessor && !this.prototype.hasOwnProperty(name)) {\r\n            const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\r\n            const descriptor = this.getPropertyDescriptor(name, key, options);\r\n            if (descriptor !== undefined) {\r\n                Object.defineProperty(this.prototype, name, descriptor);\r\n                if (DEV_MODE) {\r\n                    // If this class doesn't have its own set, create one and initialize\r\n                    // with the values in the set from the nearest ancestor class, if any.\r\n                    if (!this.hasOwnProperty('__reactivePropertyKeys')) {\r\n                        this.__reactivePropertyKeys = new Set((_a = this.__reactivePropertyKeys) !== null && _a !== void 0 ? _a : []);\r\n                    }\r\n                    this.__reactivePropertyKeys.add(name);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns a property descriptor to be defined on the given named property.\r\n     * If no descriptor is returned, the property will not become an accessor.\r\n     * For example,\r\n     *\r\n     * ```ts\r\n     * class MyElement extends LitElement {\r\n     *   static getPropertyDescriptor(name, key, options) {\r\n     *     const defaultDescriptor =\r\n     *         super.getPropertyDescriptor(name, key, options);\r\n     *     const setter = defaultDescriptor.set;\r\n     *     return {\r\n     *       get: defaultDescriptor.get,\r\n     *       set(value) {\r\n     *         setter.call(this, value);\r\n     *         // custom action.\r\n     *       },\r\n     *       configurable: true,\r\n     *       enumerable: true\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @nocollapse\r\n     * @category properties\r\n     */\r\n    static getPropertyDescriptor(name, key, options) {\r\n        return {\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            get() {\r\n                return this[key];\r\n            },\r\n            set(value) {\r\n                const oldValue = this[name];\r\n                this[key] = value;\r\n                this.requestUpdate(name, oldValue, options);\r\n            },\r\n            configurable: true,\r\n            enumerable: true,\r\n        };\r\n    }\r\n    /**\r\n     * Returns the property options associated with the given property.\r\n     * These options are defined with a `PropertyDeclaration` via the `properties`\r\n     * object or the `@property` decorator and are registered in\r\n     * `createProperty(...)`.\r\n     *\r\n     * Note, this method should be considered \"final\" and not overridden. To\r\n     * customize the options for a given property, override [[`createProperty`]].\r\n     *\r\n     * @nocollapse\r\n     * @final\r\n     * @category properties\r\n     */\r\n    static getPropertyOptions(name) {\r\n        return this.elementProperties.get(name) || defaultPropertyDeclaration;\r\n    }\r\n    /**\r\n     * Creates property accessors for registered properties, sets up element\r\n     * styling, and ensures any superclasses are also finalized. Returns true if\r\n     * the element was finalized.\r\n     * @nocollapse\r\n     */\r\n    static finalize() {\r\n        if (this.hasOwnProperty(finalized)) {\r\n            return false;\r\n        }\r\n        this[finalized] = true;\r\n        // finalize any superclasses\r\n        const superCtor = Object.getPrototypeOf(this);\r\n        superCtor.finalize();\r\n        this.elementProperties = new Map(superCtor.elementProperties);\r\n        // initialize Map populated in observedAttributes\r\n        this.__attributeToPropertyMap = new Map();\r\n        // make any properties\r\n        // Note, only process \"own\" properties since this element will inherit\r\n        // any properties defined on the superClass, and finalization ensures\r\n        // the entire prototype chain is finalized.\r\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\r\n            const props = this.properties;\r\n            // support symbols in properties (IE11 does not support this)\r\n            const propKeys = [\r\n                ...Object.getOwnPropertyNames(props),\r\n                ...Object.getOwnPropertySymbols(props),\r\n            ];\r\n            // This for/of is ok because propKeys is an array\r\n            for (const p of propKeys) {\r\n                // note, use of `any` is due to TypeScript lack of support for symbol in\r\n                // index types\r\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n                this.createProperty(p, props[p]);\r\n            }\r\n        }\r\n        this.elementStyles = this.finalizeStyles(this.styles);\r\n        // DEV mode warnings\r\n        if (DEV_MODE) {\r\n            const warnRemovedOrRenamed = (name, renamed = false) => {\r\n                if (this.prototype.hasOwnProperty(name)) {\r\n                    issueWarning(renamed ? 'renamed-api' : 'removed-api', `\\`${name}\\` is implemented on class ${this.name}. It ` +\r\n                        `has been ${renamed ? 'renamed' : 'removed'} ` +\r\n                        `in this version of LitElement.`);\r\n                }\r\n            };\r\n            warnRemovedOrRenamed('initialize');\r\n            warnRemovedOrRenamed('requestUpdateInternal');\r\n            warnRemovedOrRenamed('_getUpdateComplete', true);\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Takes the styles the user supplied via the `static styles` property and\r\n     * returns the array of styles to apply to the element.\r\n     * Override this method to integrate into a style management system.\r\n     *\r\n     * Styles are deduplicated preserving the _last_ instance in the list. This\r\n     * is a performance optimization to avoid duplicated styles that can occur\r\n     * especially when composing via subclassing. The last item is kept to try\r\n     * to preserve the cascade order with the assumption that it's most important\r\n     * that last added styles override previous styles.\r\n     *\r\n     * @nocollapse\r\n     * @category styles\r\n     */\r\n    static finalizeStyles(styles) {\r\n        const elementStyles = [];\r\n        if (Array.isArray(styles)) {\r\n            // Dedupe the flattened array in reverse order to preserve the last items.\r\n            // Casting to Array<unknown> works around TS error that\r\n            // appears to come from trying to flatten a type CSSResultArray.\r\n            const set = new Set(styles.flat(Infinity).reverse());\r\n            // Then preserve original order by adding the set items in reverse order.\r\n            for (const s of set) {\r\n                elementStyles.unshift(getCompatibleStyle(s));\r\n            }\r\n        }\r\n        else if (styles !== undefined) {\r\n            elementStyles.push(getCompatibleStyle(styles));\r\n        }\r\n        return elementStyles;\r\n    }\r\n    /**\r\n     * Returns the property name for the given attribute `name`.\r\n     * @nocollapse\r\n     */\r\n    static __attributeNameForProperty(name, options) {\r\n        const attribute = options.attribute;\r\n        return attribute === false\r\n            ? undefined\r\n            : typeof attribute === 'string'\r\n                ? attribute\r\n                : typeof name === 'string'\r\n                    ? name.toLowerCase()\r\n                    : undefined;\r\n    }\r\n    /**\r\n     * Internal only override point for customizing work done when elements\r\n     * are constructed.\r\n     *\r\n     * @internal\r\n     */\r\n    _initialize() {\r\n        var _a;\r\n        this.__updatePromise = new Promise((res) => (this.enableUpdating = res));\r\n        this._$changedProperties = new Map();\r\n        this.__saveInstanceProperties();\r\n        // ensures first update will be caught by an early access of\r\n        // `updateComplete`\r\n        this.requestUpdate();\r\n        (_a = this.constructor._initializers) === null || _a === void 0 ? void 0 : _a.forEach((i) => i(this));\r\n    }\r\n    /**\r\n     * Registers a `ReactiveController` to participate in the element's reactive\r\n     * update cycle. The element automatically calls into any registered\r\n     * controllers during its lifecycle callbacks.\r\n     *\r\n     * If the element is connected when `addController()` is called, the\r\n     * controller's `hostConnected()` callback will be immediately called.\r\n     * @category controllers\r\n     */\r\n    addController(controller) {\r\n        var _a, _b;\r\n        ((_a = this.__controllers) !== null && _a !== void 0 ? _a : (this.__controllers = [])).push(controller);\r\n        // If a controller is added after the element has been connected,\r\n        // call hostConnected. Note, re-using existence of `renderRoot` here\r\n        // (which is set in connectedCallback) to avoid the need to track a\r\n        // first connected state.\r\n        if (this.renderRoot !== undefined && this.isConnected) {\r\n            (_b = controller.hostConnected) === null || _b === void 0 ? void 0 : _b.call(controller);\r\n        }\r\n    }\r\n    /**\r\n     * Removes a `ReactiveController` from the element.\r\n     * @category controllers\r\n     */\r\n    removeController(controller) {\r\n        var _a;\r\n        // Note, if the indexOf is -1, the >>> will flip the sign which makes the\r\n        // splice do nothing.\r\n        (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.splice(this.__controllers.indexOf(controller) >>> 0, 1);\r\n    }\r\n    /**\r\n     * Fixes any properties set on the instance before upgrade time.\r\n     * Otherwise these would shadow the accessor and break these properties.\r\n     * The properties are stored in a Map which is played back after the\r\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\r\n     * (<=41), properties created for native platform properties like (`id` or\r\n     * `name`) may not have default values set in the element constructor. On\r\n     * these browsers native properties appear on instances and therefore their\r\n     * default value will overwrite any element default (e.g. if the element sets\r\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\r\n     * the native platform default).\r\n     */\r\n    __saveInstanceProperties() {\r\n        // Use forEach so this works even if for/of loops are compiled to for loops\r\n        // expecting arrays\r\n        this.constructor.elementProperties.forEach((_v, p) => {\r\n            if (this.hasOwnProperty(p)) {\r\n                this.__instanceProperties.set(p, this[p]);\r\n                delete this[p];\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Returns the node into which the element should render and by default\r\n     * creates and returns an open shadowRoot. Implement to customize where the\r\n     * element's DOM is rendered. For example, to render into the element's\r\n     * childNodes, return `this`.\r\n     *\r\n     * @return Returns a node into which to render.\r\n     * @category rendering\r\n     */\r\n    createRenderRoot() {\r\n        var _a;\r\n        const renderRoot = (_a = this.shadowRoot) !== null && _a !== void 0 ? _a : this.attachShadow(this.constructor.shadowRootOptions);\r\n        adoptStyles(renderRoot, this.constructor.elementStyles);\r\n        return renderRoot;\r\n    }\r\n    /**\r\n     * On first connection, creates the element's renderRoot, sets up\r\n     * element styling, and enables updating.\r\n     * @category lifecycle\r\n     */\r\n    connectedCallback() {\r\n        var _a;\r\n        // create renderRoot before first update.\r\n        if (this.renderRoot === undefined) {\r\n            this.renderRoot = this.createRenderRoot();\r\n        }\r\n        this.enableUpdating(true);\r\n        (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.forEach((c) => { var _a; return (_a = c.hostConnected) === null || _a === void 0 ? void 0 : _a.call(c); });\r\n    }\r\n    /**\r\n     * Note, this method should be considered final and not overridden. It is\r\n     * overridden on the element instance with a function that triggers the first\r\n     * update.\r\n     * @category updates\r\n     */\r\n    enableUpdating(_requestedUpdate) { }\r\n    /**\r\n     * Allows for `super.disconnectedCallback()` in extensions while\r\n     * reserving the possibility of making non-breaking feature additions\r\n     * when disconnecting at some point in the future.\r\n     * @category lifecycle\r\n     */\r\n    disconnectedCallback() {\r\n        var _a;\r\n        (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.forEach((c) => { var _a; return (_a = c.hostDisconnected) === null || _a === void 0 ? void 0 : _a.call(c); });\r\n    }\r\n    /**\r\n     * Synchronizes property values when attributes change.\r\n     * @category attributes\r\n     */\r\n    attributeChangedCallback(name, _old, value) {\r\n        this._$attributeToProperty(name, value);\r\n    }\r\n    __propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\r\n        var _a, _b;\r\n        const attr = this.constructor.__attributeNameForProperty(name, options);\r\n        if (attr !== undefined && options.reflect === true) {\r\n            const toAttribute = (_b = (_a = options.converter) === null || _a === void 0 ? void 0 : _a.toAttribute) !== null && _b !== void 0 ? _b : defaultConverter.toAttribute;\r\n            const attrValue = toAttribute(value, options.type);\r\n            if (DEV_MODE &&\r\n                this.constructor.enabledWarnings.indexOf('migration') >= 0 &&\r\n                attrValue === undefined) {\r\n                issueWarning('undefined-attribute-value', `The attribute value for the ${name} property is ` +\r\n                    `undefined on element ${this.localName}. The attribute will be ` +\r\n                    `removed, but in the previous version of \\`ReactiveElement\\`, ` +\r\n                    `the attribute would not have changed.`);\r\n            }\r\n            // Track if the property is being reflected to avoid\r\n            // setting the property again via `attributeChangedCallback`. Note:\r\n            // 1. this takes advantage of the fact that the callback is synchronous.\r\n            // 2. will behave incorrectly if multiple attributes are in the reaction\r\n            // stack at time of calling. However, since we process attributes\r\n            // in `update` this should not be possible (or an extreme corner case\r\n            // that we'd like to discover).\r\n            // mark state reflecting\r\n            this.__reflectingProperty = name;\r\n            if (attrValue == null) {\r\n                this.removeAttribute(attr);\r\n            }\r\n            else {\r\n                this.setAttribute(attr, attrValue);\r\n            }\r\n            // mark state not reflecting\r\n            this.__reflectingProperty = null;\r\n        }\r\n    }\r\n    /** @internal */\r\n    _$attributeToProperty(name, value) {\r\n        var _a, _b, _c;\r\n        const ctor = this.constructor;\r\n        // Note, hint this as an `AttributeMap` so closure clearly understands\r\n        // the type; it has issues with tracking types through statics\r\n        const propName = ctor.__attributeToPropertyMap.get(name);\r\n        // Use tracking info to avoid reflecting a property value to an attribute\r\n        // if it was just set because the attribute changed.\r\n        if (propName !== undefined && this.__reflectingProperty !== propName) {\r\n            const options = ctor.getPropertyOptions(propName);\r\n            const converter = options.converter;\r\n            const fromAttribute = (_c = (_b = (_a = converter) === null || _a === void 0 ? void 0 : _a.fromAttribute) !== null && _b !== void 0 ? _b : (typeof converter === 'function'\r\n                ? converter\r\n                : null)) !== null && _c !== void 0 ? _c : defaultConverter.fromAttribute;\r\n            // mark state reflecting\r\n            this.__reflectingProperty = propName;\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this[propName] = fromAttribute(value, options.type);\r\n            // mark state not reflecting\r\n            this.__reflectingProperty = null;\r\n        }\r\n    }\r\n    /**\r\n     * Requests an update which is processed asynchronously. This should be called\r\n     * when an element should update based on some state not triggered by setting\r\n     * a reactive property. In this case, pass no arguments. It should also be\r\n     * called when manually implementing a property setter. In this case, pass the\r\n     * property `name` and `oldValue` to ensure that any configured property\r\n     * options are honored.\r\n     *\r\n     * @param name name of requesting property\r\n     * @param oldValue old value of requesting property\r\n     * @param options property options to use instead of the previously\r\n     *     configured options\r\n     * @category updates\r\n     */\r\n    requestUpdate(name, oldValue, options) {\r\n        let shouldRequestUpdate = true;\r\n        // If we have a property key, perform property update steps.\r\n        if (name !== undefined) {\r\n            options =\r\n                options ||\r\n                    this.constructor.getPropertyOptions(name);\r\n            const hasChanged = options.hasChanged || notEqual;\r\n            if (hasChanged(this[name], oldValue)) {\r\n                if (!this._$changedProperties.has(name)) {\r\n                    this._$changedProperties.set(name, oldValue);\r\n                }\r\n                // Add to reflecting properties set.\r\n                // Note, it's important that every change has a chance to add the\r\n                // property to `_reflectingProperties`. This ensures setting\r\n                // attribute + property reflects correctly.\r\n                if (options.reflect === true && this.__reflectingProperty !== name) {\r\n                    if (this.__reflectingProperties === undefined) {\r\n                        this.__reflectingProperties = new Map();\r\n                    }\r\n                    this.__reflectingProperties.set(name, options);\r\n                }\r\n            }\r\n            else {\r\n                // Abort the request if the property should not be considered changed.\r\n                shouldRequestUpdate = false;\r\n            }\r\n        }\r\n        if (!this.isUpdatePending && shouldRequestUpdate) {\r\n            this.__updatePromise = this.__enqueueUpdate();\r\n        }\r\n        // Note, since this no longer returns a promise, in dev mode we return a\r\n        // thenable which warns if it's called.\r\n        return DEV_MODE\r\n            ? requestUpdateThenable(this.localName)\r\n            : undefined;\r\n    }\r\n    /**\r\n     * Sets up the element to asynchronously update.\r\n     */\r\n    async __enqueueUpdate() {\r\n        this.isUpdatePending = true;\r\n        try {\r\n            // Ensure any previous update has resolved before updating.\r\n            // This `await` also ensures that property changes are batched.\r\n            await this.__updatePromise;\r\n        }\r\n        catch (e) {\r\n            // Refire any previous errors async so they do not disrupt the update\r\n            // cycle. Errors are refired so developers have a chance to observe\r\n            // them, and this can be done by implementing\r\n            // `window.onunhandledrejection`.\r\n            Promise.reject(e);\r\n        }\r\n        const result = this.scheduleUpdate();\r\n        // If `scheduleUpdate` returns a Promise, we await it. This is done to\r\n        // enable coordinating updates with a scheduler. Note, the result is\r\n        // checked to avoid delaying an additional microtask unless we need to.\r\n        if (result != null) {\r\n            await result;\r\n        }\r\n        return !this.isUpdatePending;\r\n    }\r\n    /**\r\n     * Schedules an element update. You can override this method to change the\r\n     * timing of updates by returning a Promise. The update will await the\r\n     * returned Promise, and you should resolve the Promise to allow the update\r\n     * to proceed. If this method is overridden, `super.scheduleUpdate()`\r\n     * must be called.\r\n     *\r\n     * For instance, to schedule updates to occur just before the next frame:\r\n     *\r\n     * ```ts\r\n     * override protected async scheduleUpdate(): Promise<unknown> {\r\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\r\n     *   super.scheduleUpdate();\r\n     * }\r\n     * ```\r\n     * @category updates\r\n     */\r\n    scheduleUpdate() {\r\n        return this.performUpdate();\r\n    }\r\n    /**\r\n     * Performs an element update. Note, if an exception is thrown during the\r\n     * update, `firstUpdated` and `updated` will not be called.\r\n     *\r\n     * Call `performUpdate()` to immediately process a pending update. This should\r\n     * generally not be needed, but it can be done in rare cases when you need to\r\n     * update synchronously.\r\n     *\r\n     * Note: To ensure `performUpdate()` synchronously completes a pending update,\r\n     * it should not be overridden. In LitElement 2.x it was suggested to override\r\n     * `performUpdate()` to also customizing update scheduling. Instead, you should now\r\n     * override `scheduleUpdate()`. For backwards compatibility with LitElement 2.x,\r\n     * scheduling updates via `performUpdate()` continues to work, but will make\r\n     * also calling `performUpdate()` to synchronously process updates difficult.\r\n     *\r\n     * @category updates\r\n     */\r\n    performUpdate() {\r\n        var _a, _b;\r\n        // Abort any update if one is not pending when this is called.\r\n        // This can happen if `performUpdate` is called early to \"flush\"\r\n        // the update.\r\n        if (!this.isUpdatePending) {\r\n            return;\r\n        }\r\n        // create renderRoot before first update.\r\n        if (!this.hasUpdated) {\r\n            // Produce warning if any class properties are shadowed by class fields\r\n            if (DEV_MODE) {\r\n                const shadowedProperties = [];\r\n                (_a = this.constructor.__reactivePropertyKeys) === null || _a === void 0 ? void 0 : _a.forEach((p) => {\r\n                    var _a;\r\n                    if (this.hasOwnProperty(p) && !((_a = this.__instanceProperties) === null || _a === void 0 ? void 0 : _a.has(p))) {\r\n                        shadowedProperties.push(p);\r\n                    }\r\n                });\r\n                if (shadowedProperties.length) {\r\n                    throw new Error(`The following properties on element ${this.localName} will not ` +\r\n                        `trigger updates as expected because they are set using class ` +\r\n                        `fields: ${shadowedProperties.join(', ')}. ` +\r\n                        `Native class fields and some compiled output will overwrite ` +\r\n                        `accessors used for detecting changes. See ` +\r\n                        `https://lit.dev/msg/class-field-shadowing ` +\r\n                        `for more information.`);\r\n                }\r\n            }\r\n        }\r\n        // Mixin instance properties once, if they exist.\r\n        if (this.__instanceProperties) {\r\n            // Use forEach so this works even if for/of loops are compiled to for loops\r\n            // expecting arrays\r\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n            this.__instanceProperties.forEach((v, p) => (this[p] = v));\r\n            this.__instanceProperties = undefined;\r\n        }\r\n        let shouldUpdate = false;\r\n        const changedProperties = this._$changedProperties;\r\n        try {\r\n            shouldUpdate = this.shouldUpdate(changedProperties);\r\n            if (shouldUpdate) {\r\n                this.willUpdate(changedProperties);\r\n                (_b = this.__controllers) === null || _b === void 0 ? void 0 : _b.forEach((c) => { var _a; return (_a = c.hostUpdate) === null || _a === void 0 ? void 0 : _a.call(c); });\r\n                this.update(changedProperties);\r\n            }\r\n            else {\r\n                this.__markUpdated();\r\n            }\r\n        }\r\n        catch (e) {\r\n            // Prevent `firstUpdated` and `updated` from running when there's an\r\n            // update exception.\r\n            shouldUpdate = false;\r\n            // Ensure element can accept additional updates after an exception.\r\n            this.__markUpdated();\r\n            throw e;\r\n        }\r\n        // The update is no longer considered pending and further updates are now allowed.\r\n        if (shouldUpdate) {\r\n            this._$didUpdate(changedProperties);\r\n        }\r\n    }\r\n    /**\r\n     * @category updates\r\n     */\r\n    willUpdate(_changedProperties) { }\r\n    // Note, this is an override point for polyfill-support.\r\n    // @internal\r\n    _$didUpdate(changedProperties) {\r\n        var _a;\r\n        (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.forEach((c) => { var _a; return (_a = c.hostUpdated) === null || _a === void 0 ? void 0 : _a.call(c); });\r\n        if (!this.hasUpdated) {\r\n            this.hasUpdated = true;\r\n            this.firstUpdated(changedProperties);\r\n        }\r\n        this.updated(changedProperties);\r\n        if (DEV_MODE &&\r\n            this.isUpdatePending &&\r\n            this.constructor.enabledWarnings.indexOf('change-in-update') >= 0) {\r\n            issueWarning('change-in-update', `Element ${this.localName} scheduled an update ` +\r\n                `(generally because a property was set) ` +\r\n                `after an update completed, causing a new update to be scheduled. ` +\r\n                `This is inefficient and should be avoided unless the next update ` +\r\n                `can only be scheduled as a side effect of the previous update.`);\r\n        }\r\n    }\r\n    __markUpdated() {\r\n        this._$changedProperties = new Map();\r\n        this.isUpdatePending = false;\r\n    }\r\n    /**\r\n     * Returns a Promise that resolves when the element has completed updating.\r\n     * The Promise value is a boolean that is `true` if the element completed the\r\n     * update without triggering another update. The Promise result is `false` if\r\n     * a property was set inside `updated()`. If the Promise is rejected, an\r\n     * exception was thrown during the update.\r\n     *\r\n     * To await additional asynchronous work, override the `getUpdateComplete`\r\n     * method. For example, it is sometimes useful to await a rendered element\r\n     * before fulfilling this Promise. To do this, first await\r\n     * `super.getUpdateComplete()`, then any subsequent state.\r\n     *\r\n     * @return A promise of a boolean that resolves to true if the update completed\r\n     *     without triggering another update.\r\n     * @category updates\r\n     */\r\n    get updateComplete() {\r\n        return this.getUpdateComplete();\r\n    }\r\n    /**\r\n     * Override point for the `updateComplete` promise.\r\n     *\r\n     * It is not safe to override the `updateComplete` getter directly due to a\r\n     * limitation in TypeScript which means it is not possible to call a\r\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\r\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\r\n     * This method should be overridden instead. For example:\r\n     *\r\n     * ```ts\r\n     * class MyElement extends LitElement {\r\n     *   override async getUpdateComplete() {\r\n     *     const result = await super.getUpdateComplete();\r\n     *     await this._myChild.updateComplete;\r\n     *     return result;\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * @return A promise of a boolean that resolves to true if the update completed\r\n     *     without triggering another update.\r\n     * @category updates\r\n     */\r\n    getUpdateComplete() {\r\n        return this.__updatePromise;\r\n    }\r\n    /**\r\n     * Controls whether or not `update()` should be called when the element requests\r\n     * an update. By default, this method always returns `true`, but this can be\r\n     * customized to control when to update.\r\n     *\r\n     * @param _changedProperties Map of changed properties with old values\r\n     * @category updates\r\n     */\r\n    shouldUpdate(_changedProperties) {\r\n        return true;\r\n    }\r\n    /**\r\n     * Updates the element. This method reflects property values to attributes.\r\n     * It can be overridden to render and keep updated element DOM.\r\n     * Setting properties inside this method will *not* trigger\r\n     * another update.\r\n     *\r\n     * @param _changedProperties Map of changed properties with old values\r\n     * @category updates\r\n     */\r\n    update(_changedProperties) {\r\n        if (this.__reflectingProperties !== undefined) {\r\n            // Use forEach so this works even if for/of loops are compiled to for\r\n            // loops expecting arrays\r\n            this.__reflectingProperties.forEach((v, k) => this.__propertyToAttribute(k, this[k], v));\r\n            this.__reflectingProperties = undefined;\r\n        }\r\n        this.__markUpdated();\r\n    }\r\n    /**\r\n     * Invoked whenever the element is updated. Implement to perform\r\n     * post-updating tasks via DOM APIs, for example, focusing an element.\r\n     *\r\n     * Setting properties inside this method will trigger the element to update\r\n     * again after this update cycle completes.\r\n     *\r\n     * @param _changedProperties Map of changed properties with old values\r\n     * @category updates\r\n     */\r\n    updated(_changedProperties) { }\r\n    /**\r\n     * Invoked when the element is first updated. Implement to perform one time\r\n     * work on the element after update.\r\n     *\r\n     * Setting properties inside this method will trigger the element to update\r\n     * again after this update cycle completes.\r\n     *\r\n     * @param _changedProperties Map of changed properties with old values\r\n     * @category updates\r\n     */\r\n    firstUpdated(_changedProperties) { }\r\n}\r\n_d = finalized;\r\n/**\r\n * Marks class as having finished creating properties.\r\n */\r\nReactiveElement[_d] = true;\r\n/**\r\n * Memoized list of all element properties, including any superclass properties.\r\n * Created lazily on user subclasses when finalizing the class.\r\n * @nocollapse\r\n * @category properties\r\n */\r\nReactiveElement.elementProperties = new Map();\r\n/**\r\n * Memoized list of all element styles.\r\n * Created lazily on user subclasses when finalizing the class.\r\n * @nocollapse\r\n * @category styles\r\n */\r\nReactiveElement.elementStyles = [];\r\n/**\r\n * Options used when calling `attachShadow`. Set this property to customize\r\n * the options for the shadowRoot; for example, to create a closed\r\n * shadowRoot: `{mode: 'closed'}`.\r\n *\r\n * Note, these options are used in `createRenderRoot`. If this method\r\n * is customized, options should be respected if possible.\r\n * @nocollapse\r\n * @category rendering\r\n */\r\nReactiveElement.shadowRootOptions = { mode: 'open' };\r\n// Apply polyfills if available\r\npolyfillSupport === null || polyfillSupport === void 0 ? void 0 : polyfillSupport({ ReactiveElement });\r\n// Dev mode warnings...\r\nif (DEV_MODE) {\r\n    // Default warning set.\r\n    ReactiveElement.enabledWarnings = ['change-in-update'];\r\n    const ensureOwnWarnings = function (ctor) {\r\n        if (!ctor.hasOwnProperty(JSCompiler_renameProperty('enabledWarnings', ctor))) {\r\n            ctor.enabledWarnings = ctor.enabledWarnings.slice();\r\n        }\r\n    };\r\n    ReactiveElement.enableWarning = function (warning) {\r\n        ensureOwnWarnings(this);\r\n        if (this.enabledWarnings.indexOf(warning) < 0) {\r\n            this.enabledWarnings.push(warning);\r\n        }\r\n    };\r\n    ReactiveElement.disableWarning = function (warning) {\r\n        ensureOwnWarnings(this);\r\n        const i = this.enabledWarnings.indexOf(warning);\r\n        if (i >= 0) {\r\n            this.enabledWarnings.splice(i, 1);\r\n        }\r\n    };\r\n}\r\n// IMPORTANT: do not change the property name or the assignment expression.\r\n// This line will be used in regexes to search for ReactiveElement usage.\r\n((_c = globalThis.reactiveElementVersions) !== null && _c !== void 0 ? _c : (globalThis.reactiveElementVersions = [])).push('1.0.2');\r\nif (DEV_MODE && globalThis.reactiveElementVersions.length > 1) {\r\n    issueWarning('multiple-versions', `Multiple versions of Lit loaded. Loading multiple versions ` +\r\n        `is not recommended.`);\r\n}\r\n//# sourceMappingURL=reactive-element.js.map"]},"metadata":{},"sourceType":"module"}